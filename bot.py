import asyncio
import logging
import ssl
import sys
import time

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import FSInputFile, Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from aiohttp import web

from Secrets.botSettings import *
from Secrets.webserverSettings import *
import Buttons.buttons as buttons
import Requests.requests as requests

dp = Dispatcher()

@dp.message(CommandStart())
async def start_command(message: Message) -> None:
   message_texts_start = [
      "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! üòä", 
      "–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. üòå\n"
      "–û–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–∞ –∏–º–µ–Ω–Ω–æ –≤ –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É"
   ]
   if requests.check_user_id_in_db(message.from_user.id):
      await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=buttons.inline_menu)
   else:
      for text in message_texts_start:
         if text != message_texts_start[-1]:
            await message.answer(text)
            time.sleep(500)
         else:
            await message.answer(text, reply_markup=buttons.application_number_phone)

@dp.message(F.content_type == types.ContentType.CONTACT)
async def handler_contant(message: Message) -> None:
   if requests.insert_user_id_in_db(message.contact.user_id, message.contact.phone_number):
      await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", reply_markup=types.ReplyKeyboardRemove())
      await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=buttons.inline_menu)

@dp.message(Command('/', 'command_admin_login'))
async def admin_login(message: Message) -> None:
   if requests.check_admin_in_db(message.from_user.id):
      await message.answer("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=buttons.markup)
   else:
      if requests.insert_admin_in_db(message.from_user.id):
         await message.answer("–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ–∂–∏–º –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=buttons.markup_admin_keyboard)
      else:
         await message.answer("–ü—Ä–µ–≤—ã—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤") 

async def on_startup(bot: Bot) -> None:
   await bot.set_webhook(
      f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}",
      certificate=FSInputFile(WEBHOOK_SSL_CERT),
      secret_token=WEBHOOK_SECRET,
   )

async def main() -> None:
   # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ö—É–∫–∞, —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±—Ö—É–∫
   dp.startup.register(on_startup)

   # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å —Ä–µ–∂–∏–º–æ–º —Ä–∞–∑–±–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, 
   # –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –≤—ã–∑–æ–≤–∞—Ö API
   bot = Bot(API_TOKEN,  parse_mode=ParseMode.HTML)

   # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ aiohttp.web.Application
   app = web.Application()
   
   # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
   webhook_request_handle = SimpleRequestHandler(
      dispatcher=dp,
      bot=Bot,
      secret_token=WEBHOOK_SECRET,
   )

   # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±–∞–±–æ—Ç—á–∏–∫–∞ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
   webhook_request_handle.register(app, path=WEBHOOK_PATH)

   # –ü—Ä–∏–≤—è–∑–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∫ –∑–∞–ø—É—Å–∫—É –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   setup_application(app, dp, bot=bot)

   # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
   context.load_cert_chain(WEBHOOK_SSL_CERT, WEBHOOK_SSL_PRIV)

   # –ó–∞–ø—É—Å–∫ –≤–µ–±—Å–µ—Ä–≤–µ—Ä–∞
   web.run_app(app, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT, ssl_context=context) # 

   # –ó–∞–ø—É—Å–∫ –ø–æ–ª–∏–≥–æ–Ω–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º
   await dp.start_polling(bot)

if __name__ == "__main__":
   logging.basicConfig(level=logging.INFO, stream=sys.stdout)
   asyncio.run(main())